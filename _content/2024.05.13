서브쿼리
- SQL문 내부에서 사용하는 SELECT문
- 서브쿼리는 괄호 안에 기술해야 하며, WHERE절, SELECT절, FROM절, HAVING절 등에 넣어 사용할 수 있음
- 일반적으로 서브쿼리가 먼저 실행된 후 메인 쿼리가 실행되는 순서로 작업이 이루어짐

서브쿼리의 사용 목적
- 데이터 필터링
- 집계 및 계산
- 비교 및 검증
- 중첩된 데이터 추출
- EXISTS절

서브쿼리와 조인의 차이점
- 데이터를 추출하는 접근 방식이 서로 다름
- 서브쿼리 : 한 문장 안에 1개의 메인 쿼리와 1개 이상의 서브쿼리가 있는 구조
- 조인 : 1개의 쿼리문 안에 2개 이상의 테이블을 연결한 후 필요한 컬럼을 조회

서브쿼리
- 작은 데이터셋이나 간단한 필터링 작업에 효율적
- 간단한 쿼리에 적합
- 데이터 필터링, 계산에 적합

조인
- 큰 테이블이면서 적절한 인덱스가 있는 경우에 효율적
- 복잡한 쿼리에 적합
- 여러 테이블 간의 관계 처리에 적합

단일 행 서브쿼리
- 서브쿼리의 결과로 단일 행을 반환함
- =,<,<=,>,>=,< > 등의 단일 행 비교 연산자를 사용하여 메인 쿼리와 서브쿼리를 연결할 수 있음

복수 행 서브쿼리
- 서브쿼리의 결과가 여러 행이 나오는 쿼리
- IN,ALL,ANY,SOME,EXISTS와 같은 복수 행 비교 연산자를 사용하여 메인 쿼리와 서브쿼리를 연결함

인라인 뷰
- FROM절에서도 서브쿼리를 사용할 수 있는데, 이를 인라인 뷰라고 함
- 뷰에는 반드시 별명을 지정해주어야 함
- 인라인 뷰의 별명은 테이블명처럼 사용할 수 있음

스칼라 서브쿼리
- SELECT절 내에서도 서브쿼리르 사용할 수 있음. 이때 서브쿼리가 하나의 값을 생성하는 형태를 스칼라 서브쿼리라고 함
- 쿼리를 실행하여 반환되는 값은 메인 쿼리에서 사용됨
- 만약 서브쿼리의 결과로 행을 0개 반환한다면 메인 쿼리의 결과는 NULL이고, 행이 2개 이상 반환되면 오류가 발생함

CTE
- 쿼리로 만든 임시 데이터셋으로 WITH절에서 정의함
- 인라인 뷰와 마찬가지로 파생 테이블처럼 사용할 수 있음
- 하나의 쿼리를 논리적인 블록으로 나눌 수 있어 가독성이 좋음
- 쿼리 내에서 여러 번 참조할 수 있기 때문에 재사용성이 좋음

상관 서브쿼리
- 메인 쿼리와 서브쿼리 간의 상관관계를 포함하는 형태의 쿼리
- 상관 서브쿼리는 메인 쿼리를 한 행씩 처리함
- 이때 연관이 있는 컬럼을 기준으로 서브쿼리에서 값을 찾음
- 이로 인해 데이터가 많아지면 속도가 느려질 수 있으니 주의해야 함
- 상관 서브쿼리는 SELECT절, FROM절, WHERE절 등에서 사용할 수 있음

다중 컬럼 서브쿼리
- 서브쿼리에서 여러 개의 컬럼을 사용하여 다중 비교를 하는 쿼리
- 서브쿼리의 결과로 나오는 여러 컬럼을 메인 쿼리의 값과 비교하여 결과를 출력

데이터 조작어 (DML)
- 데이터를 관리하는 데 사용하는 언어
- 데이터를 추가, 삭제, 변경할 때 사용

INSERT
- 테이블에 새로운 행을 삽입하는 경우에 사용
- 삽입할 컬럼명이 생략된 경우 삽입할 값이 테이블의 컬럼 수와 같아야 하며, 순서도 동일해야 함

UPDATE
- 기존 행에 있는 데이터 값을 변경할 때 사용
- UPDATE문에 WHERE절이 없으면 모든 행의 값이 변경되므로 주의해야 함

DELETE
- 기존에 있는 행을 삭제할 때 사용
- 만약 DELETE문에 WHERE절이 없으면 모든 행이 삭제되므로 주의해야 함

INSERT ON DUPLICATE KEY UPDATE
- 레코드가 없다면 새롭게 추가하고, 이미 있다면 데이터를 변경하는 경우에 사용

INSERT INTO SELECT
- SELECT문의 결과를 다른 테이블에 삽입하려면 INSERT문에서 VALUES 대신 SELECT 문장을 넣음
- 이때 SELECT문의 컬럼 수와 INSERT문에 있는 컬럼 수는 동일해야 하고, 순서가 같아야 함

UPDATE SELECT
- UPDATE문에서 서브쿼리를 사용할 수도 있음
- 변경할 값을 얻기 위해서는 SET절에서 SELECT문을 사용함
- 서브쿼리의 SELECT문에는 반드시 별명을 붙여야 하고, 서브쿼리의 결과는 단일 값이어야 함

UPDATE JOIM
- INNER JOIN을 사용하여 다른 테이블의 행과 일치하는 행을 수정할 수 있음
- LEFT OUTER JOIN을 사용하여 그렇지 않은 행을 수정할 수도 있음
- 변경할 값에는 상수나 수식뿐만 아니라 조인할 테이블에 있는 컬럼에 기반하여 값을 넣을 수도 있음

DELETE SELECT
- DELETE문에서도 삭제할 레코드를 찾기 위하여 서브쿼리를 사용할 수 있음

DELETE JOIN
- INNER JOIN을 사용하여 두 테이블에서 일치하는 행을 모두 삭제할 수 있음
- LEFT OUTER JOIN을 사용하여 일치하지 않는 행을 삭제할 수도 있음
